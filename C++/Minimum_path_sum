class Solution {
public:
    int f(int i,int j,vector<vector<int>>& grid,vector<vector<int>> &dp)
    {
     if(i<0 || j<0) return 1e9;
     if(i==0 && j==0) return grid[0][0];
     if(dp[i][j]!=-1) return dp[i][j];
     
     int top = grid[i][j] + f(i-1,j,grid,dp);
     int left = grid[i][j] + f(i,j-1,grid,dp);
     return dp[i][j]=min(top,left);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
     int m = grid.size();
     int n = grid[0].size();
     vector<vector<int>> dp(m,vector<int>(n,0));
     for(int i=0;i<m;i++)
        {
         for(int j=0;j<n;j++)
            {
             int top=1e9,left=1e9;
             if(i>0) top = grid[i][j] + dp[i-1][j];
             if(j>0) left = grid[i][j] + dp[i][j-1];
             if(i==0 && j==0) dp[i][j] = grid[i][j];
             else dp[i][j] = min(top,left);
            }
        }
     return dp[m-1][n-1];   
    }
};
